# Файл docker-compose начинается с тега версии.
version: '3.8'

# List all used services (web & db) with which we can interact with the console
services:

  # Database service
  db:
    # Image obtained from dockerhub
    image: postgres:13.0-alpine
    # Data save address
    volumes:
      # - postgres_data:/var/lib/postgresql/data
      - ./data/db:/var/lib/postgresql/data
    ports:
      - 5432:5432
    env_file:
      - .env

  # Redis service
  redis:
    image: redis:alpine
    ports:
      - 6379:6379
    depends_on:
      - db

# Web application service
  web:
  # Path to the Dockerfile to create the image that starts the service
    build: .
    # The command will work on completion of the image
    command: sh -c "chmod +x ./entrypoint.sh &&
      ./entrypoint.sh &&
      rm celerybeat-schedule && rm data/celery.log &&
      python manage.py flush --no-input &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py fill_db &&
      python manage.py runserver 0.0.0.0:8000"
    # Data save address
    volumes:
      - .:/trade_car_app
    # Ports
    ports:
      - 8000:8000
    # We collect the virtual machine from the current directory - .env
    env_file:
      - .env
    # Service startup dependency
    depends_on:
      # the web application will wait for the db service to start
      - db
      - redis

  # Worker celery service
  worker:
    build: .
    command: celery -A admin worker --loglevel=info --logfile=data/celery.log
    env_file:
      - .env
    volumes:
      - .:/trade_car_app
    depends_on:
      - web

  # Celery beat service
  beat:
    build: .
    command: celery -A admin beat -l info
    env_file:
      - .env
    volumes:
      - .:/trade_car_app
    depends_on:
      - worker

  # Flower service
  flower:
    build: .
    command: celery -A admin flower
    volumes:
      - .:/trade_car_app
    # working_dir: /data
    ports:
      - 5555:5555
    env_file:
      - .env
    depends_on:
      - beat

# volumes:
#   postgres_data:
#   data/db:
